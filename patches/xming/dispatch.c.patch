--- ./dix/save_dispatch.c	2019-11-01 14:02:26.789800023 +0000
+++ ./dix/dispatch.c	2019-11-01 15:11:38.811372795 +0000
@@ -157,6 +157,10 @@
 HWEventQueuePtr checkForInput[2];
 int connBlockScreenStart;
 
+#ifdef __MINGW32__
+extern Window g_iClipboardWindow;
+#endif
+
 static void KillAllClients(void);
 
 static int nextFreeClientID;    /* always MIN free client ID */
@@ -224,7 +228,6 @@
 #ifdef HAVE_SETITIMER
 #define SMART_SCHEDULE_DEFAULT_SIGNAL_ENABLE HAVE_SETITIMER
 Bool SmartScheduleSignalEnable = SMART_SCHEDULE_DEFAULT_SIGNAL_ENABLE;
-#endif
 
 long SmartScheduleSlice = SMART_SCHEDULE_DEFAULT_INTERVAL;
 long SmartScheduleInterval = SMART_SCHEDULE_DEFAULT_INTERVAL;
@@ -233,6 +236,7 @@
 int SmartScheduleLatencyLimited = 0;
 static ClientPtr SmartLastClient;
 static int SmartLastIndex[SMART_MAX_PRIORITY - SMART_MIN_PRIORITY + 1];
+#endif
 
 #ifdef SMART_DEBUG
 long SmartLastPrint;
@@ -240,6 +244,7 @@
 
 void Dispatch(void);
 
+#ifdef HAVE_SETITIMER
 static int
 SmartScheduleClient(int *clientReady, int nready)
 {
@@ -330,6 +335,7 @@
     if (SmartScheduleLatencyLimited < 0)
         SmartScheduleLatencyLimited = 0;
 }
+#endif
 
 void
 Dispatch(void)
@@ -339,7 +345,9 @@
     ClientPtr client;
     int nready;
     HWEventQueuePtr *icheck = checkForInput;
+#ifdef HAVE_SETITIMER
     long start_tick;
+#endif
 
     nextFreeClientID = 1;
     nClients = 0;
@@ -348,7 +356,9 @@
     if (!clientReady)
         return;
 
+#ifdef HAVE_SETITIMER
     SmartScheduleSlice = SmartScheduleInterval;
+#endif
     while (!dispatchException) {
         if (*icheck[0] != *icheck[1]) {
             ProcessInputEvents();
@@ -357,10 +367,12 @@
 
         nready = WaitForSomething(clientReady);
 
+#ifdef HAVE_SETITIMER
         if (nready) {
             clientReady[0] = SmartScheduleClient(clientReady, nready);
             nready = 1;
         }
+#endif
        /*****************
 	*  Handle events in round robin fashion, doing input between
 	*  each round
@@ -379,12 +391,15 @@
             }
             isItTimeToYield = FALSE;
 
+#ifdef HAVE_SETITIMER
             start_tick = SmartScheduleTime;
+#endif
             while (!isItTimeToYield) {
                 if (*icheck[0] != *icheck[1])
                     ProcessInputEvents();
 
                 FlushIfCriticalOutputPending();
+#ifdef HAVE_SETITIMER
                 if ((SmartScheduleTime - start_tick) >= SmartScheduleSlice)
                 {
                     /* Penalize clients which consume ticks */
@@ -392,6 +407,7 @@
                         client->smart_priority--;
                     break;
                 }
+#endif
 
                 /* now, finally, deal with client requests */
                 result = ReadRequestFromClient(client);
@@ -426,8 +442,10 @@
                         result =
                             (*client->requestVector[client->majorOp]) (client);
                 }
+#ifdef HAVE_SETITIMER
                 if (!SmartScheduleSignalEnable)
                     SmartScheduleTime = GetTimeInMillis();
+#endif
 
 #ifdef XSERVER_DTRACE
                 if (XSERVER_REQUEST_DONE_ENABLED())
@@ -448,9 +466,11 @@
                 }
             }
             FlushAllOutput();
+#ifdef HAVE_SETITIMER
             client = clients[clientReady[nready]];
             if (client)
                 client->smart_stop_tick = SmartScheduleTime;
+#endif
         }
         dispatchException &= ~DE_PRIORITYCHANGE;
     }
@@ -460,7 +480,9 @@
     KillAllClients();
     free(clientReady);
     dispatchException &= ~DE_RESET;
+#ifdef HAVE_SETITIMER
     SmartScheduleLatencyLimited = 0;
+#endif
     ResetOsBuffers();
 }
 
@@ -952,6 +974,9 @@
     };
     pHead = RealChildHead(pWin);
     for (pChild = pWin->lastChild; pChild != pHead; pChild = pChild->prevSib)
+#ifdef __MINGW32__ /* Ignore the clipboard client to stop it being closed when connecting via XDMCP */
+        if (pChild->drawable.id != g_iClipboardWindow)
+#endif
         numChildren++;
     if (numChildren) {
         int curChild = 0;
@@ -961,6 +986,9 @@
             return BadAlloc;
         for (pChild = pWin->lastChild; pChild != pHead;
              pChild = pChild->prevSib)
+#ifdef __MINGW32__
+            if (pChild->drawable.id != g_iClipboardWindow)
+#endif
             childIDs[curChild++] = pChild->drawable.id;
     }
 
@@ -3221,17 +3249,14 @@
 
     rc = dixLookupClient(&killclient, stuff->id, client, DixDestroyAccess);
     if (rc == Success) {
-        CloseDownClient(killclient);
         if (client == killclient) {
-            /* force yield and return Success, so that Dispatch()
-             * doesn't try to touch client
-             */
+            MarkClientException(client);
             isItTimeToYield = TRUE;
         }
-        return Success;
+        else
+            CloseDownClient(killclient);
     }
-    else
-        return rc;
+    return rc;
 }
 
 int
@@ -3423,7 +3448,9 @@
         if (client->index < nextFreeClientID)
             nextFreeClientID = client->index;
         clients[client->index] = NullClient;
+#ifdef HAVE_SETITIMER
         SmartLastClient = NullClient;
+#endif
         dixFreeObjectWithPrivates(client, PRIVATE_CLIENT);
 
         while (!clients[currentMaxClients - 1])
@@ -3453,8 +3480,10 @@
     client->requestVector = InitialVector;
     client->osPrivate = ospriv;
     QueryMinMaxKeyCodes(&client->minKC, &client->maxKC);
+#ifdef HAVE_SETITIMER
     client->smart_start_tick = SmartScheduleTime;
     client->smart_stop_tick = SmartScheduleTime;
+#endif
     client->clientIds = NULL;
 }
 
