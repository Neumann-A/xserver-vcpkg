--- ./hw/xwin/save_windialogs.c	2017-08-24 10:42:51.000000000 +0100
+++ ./hw/xwin/windialogs.c	2021-03-23 11:32:27.819570361 +0000
@@ -73,6 +73,8 @@
     RECT rect;
     HFONT font;
     COLORREF crText;
+    BOOL line = TRUE;
+    long lfHeight;
 
     draw = (DRAWITEMSTRUCT *) lParam;
     GetWindowText(draw->hwndItem, str, sizeof(str));
@@ -84,13 +86,15 @@
         crText = RGB(128 + 64, 0, 0);
     else if (draw->itemState & ODS_FOCUS)
         crText = RGB(0, 128 + 64, 0);
-    else
-        crText = RGB(0, 0, 128 + 64);
+    else {
+        crText = RGB(0, 70, 213);
+        line = FALSE;
+    }
     SetTextColor(draw->hDC, crText);
 
-    /* Create font 8 high, standard dialog font */
-    font = CreateFont(-8, 0, 0, 0, FW_DONTCARE, FALSE, FALSE, FALSE,
-                      0, 0, 0, 0, 0, "MS Sans Serif");
+    lfHeight = -MulDiv(8, GetDeviceCaps(draw->hDC, LOGPIXELSY), 72);
+    font = CreateFont(lfHeight, 0, 0, 0, FW_DONTCARE, FALSE, line, FALSE,
+                      0, 0, 0, 0, 0, "MS Shell Dlg 2");
     if (!font) {
         ErrorF("winDrawURLWindow: Unable to create URL font, bailing.\n");
         return;
@@ -113,11 +117,17 @@
     WNDPROC origCB = NULL;
     HCURSOR cursor;
 
-    /* If it's a SetCursor message, tell it to the hand */
-    if (msg == WM_SETCURSOR) {
-        cursor = LoadCursor(NULL, IDC_HAND);
-        if (cursor)
-            SetCursor(cursor);
+    switch (msg) {
+    case WM_SETCURSOR:
+        /* If it's a SetCursor message, tell it to the hand */
+        cursor = (HCURSOR)LoadImage(NULL, IDC_HAND, IMAGE_CURSOR, 0, 0, LR_DEFAULTSIZE | LR_SHARED);
+        if (cursor) SetCursor(cursor);
+        return TRUE;
+    case WM_GETDLGCODE:
+        /* We handle 'default' pushbutton input in the BS_OWNERDRAW controls */
+        return DLGC_BUTTON | DLGC_DEFPUSHBUTTON;
+    case BM_SETSTYLE:
+        /* and loose pushbutton style messages to avoid being drawn pushbutton */
         return TRUE;
     }
     origCB = (WNDPROC) GetWindowLongPtr(hwnd, GWLP_USERDATA);
@@ -182,7 +192,7 @@
      */
     if (GetSystemMetrics(SM_CMONITORS) > 1) {
         /* Still need to refresh the frame change. */
-        SetWindowPos(hwndDlg, HWND_TOPMOST, 0, 0, 0, 0,
+        SetWindowPos(hwndDlg, HWND_TOP, 0, 0, 0, 0,
                      SWP_NOMOVE | SWP_NOSIZE | SWP_FRAMECHANGED);
     }
     else {
@@ -195,7 +205,7 @@
         OffsetRect(&rc, -rcDlg.right, -rcDlg.bottom);
 
         SetWindowPos(hwndDlg,
-                     HWND_TOPMOST,
+                     HWND_TOP,
                      rcDesk.left + (rc.right / 2),
                      rcDesk.top + (rc.bottom / 2),
                      0, 0, SWP_NOSIZE | SWP_FRAMECHANGED);
@@ -204,7 +214,8 @@
     if (g_hIconX)
         hIcon = g_hIconX;
     else
-        hIcon = LoadIcon(g_hInstance, MAKEINTRESOURCE(IDI_XWIN));
+        hIcon = LoadImage(g_hInstance, MAKEINTRESOURCE(IDI_XWIN),
+                          IMAGE_ICON, 0, 0, LR_DEFAULTSIZE);
 
     if (g_hSmallIconX)
         hIconSmall = g_hSmallIconX;
@@ -541,6 +552,7 @@
 winAboutDlgProc(HWND hwndDialog, UINT message, WPARAM wParam, LPARAM lParam)
 {
     static winPrivScreenPtr s_pScreenPriv = NULL;
+    INT_PTR iReturn;
 
 #if CYGDEBUG
     winDebug("winAboutDlgProc\n");
@@ -559,7 +571,12 @@
         winInitDialog(hwndDialog);
 
         /* Override the URL buttons */
+        winOverrideURLButton(hwndDialog, ID_ABOUT_FONTS);
         winOverrideURLButton(hwndDialog, ID_ABOUT_WEBSITE);
+        winOverrideURLButton(hwndDialog, ID_ABOUT_RELEASES);
+        winOverrideURLButton(hwndDialog, ID_ABOUT_UG);
+        winOverrideURLButton(hwndDialog, ID_ABOUT_XMINGRC);
+        winOverrideURLButton(hwndDialog, ID_ABOUT_FAQ);
 
         return TRUE;
 
@@ -590,25 +607,102 @@
             PostMessage(s_pScreenPriv->hwndScreen, WM_NULL, 0, 0);
 
             /* Restore window procedures for URL buttons */
+            winUnoverrideURLButton(hwndDialog, ID_ABOUT_FONTS);
             winUnoverrideURLButton(hwndDialog, ID_ABOUT_WEBSITE);
+            winUnoverrideURLButton(hwndDialog, ID_ABOUT_RELEASES);
+            winUnoverrideURLButton(hwndDialog, ID_ABOUT_UG);
+            winUnoverrideURLButton(hwndDialog, ID_ABOUT_XMINGRC);
+            winUnoverrideURLButton(hwndDialog, ID_ABOUT_FAQ);
 
             return TRUE;
 
+        case ID_ABOUT_FONTS:
+        {
+            const char *pszWinPath = "http://www.StraightRunning.com/XmingNotes/fonts.php";
+
+            iReturn = (INT_PTR) ShellExecute(NULL,
+                                         "open",
+                                         pszWinPath, NULL, NULL, SW_SHOWNORMAL);
+            if (iReturn < 33) {
+                ErrorF("winAboutDlgProc - WM_COMMAND - ID_ABOUT_FONTS - "
+                       "ShellExecute failed: %d\n", (int)iReturn);
+            }
+        }
+            return TRUE;
+
+        case ID_ABOUT_RELEASES:
+        {
+            const char *pszWinPath = "http://www.StraightRunning.com/XmingNotes/changes.php";
+
+            iReturn = (INT_PTR) ShellExecute(NULL,
+                                         "open",
+                                         pszWinPath, NULL, NULL, SW_SHOWNORMAL);
+            if (iReturn < 33) {
+                ErrorF("winAboutDlgProc - WM_COMMAND - ID_ABOUT_RELEASES - "
+                       "ShellExecute failed: %d\n", (int)iReturn);
+            }
+        }
+             return TRUE;
+
         case ID_ABOUT_WEBSITE:
         {
-            const char *pszPath = __VENDORDWEBSUPPORT__;
-            INT_PTR iReturn;
+            const char *pszPath = "http://www.StraightRunning.com/XmingNotes/index.php";
 
             iReturn = (INT_PTR) ShellExecute(NULL,
                                          "open",
-                                         pszPath, NULL, NULL, SW_MAXIMIZE);
-            if (iReturn < 32) {
+                                         pszPath, NULL, NULL, SW_SHOWNORMAL);
+            if (iReturn < 33) {
                 ErrorF("winAboutDlgProc - WM_COMMAND - ID_ABOUT_WEBSITE - "
                        "ShellExecute failed: %d\n", (int)iReturn);
+            }
+        }
+            return TRUE;
+
+        case ID_ABOUT_UG:
+        {
+            const char *pszPath = "http://www.StraightRunning.com/XmingNotes/xming.php";
+
+            iReturn = (INT_PTR) ShellExecute(NULL,
+                                         "open",
+                                         pszPath, NULL, NULL, SW_SHOWNORMAL);
+            if (iReturn < 33) {
+                ErrorF("winAboutDlgProc - WM_COMMAND - ID_ABOUT_UG - "
+                       "ShellExecute failed: %d\n", (int)iReturn);
+            }
+        }
+            return TRUE;
+
+        case ID_ABOUT_XMINGRC:
+        {
+            const char *pszPath = "http://www.StraightRunning.com/XmingNotes/xmingrc.php";
 
+            iReturn = (INT_PTR) ShellExecute(NULL,
+                                        "open",
+                                        pszPath, NULL, NULL, SW_SHOWNORMAL);
+            if (iReturn < 33) {
+                ErrorF("winAboutDlgProc - WM_COMMAND - ID_ABOUT_XMINGRC - "
+                       "ShellExecute failed: %d\n", (int)iReturn);
             }
         }
             return TRUE;
+
+        case ID_ABOUT_FAQ:
+        {
+            const char *pszPath = "http://www.StraightRunning.com/XmingNotes/trouble.php";
+
+            iReturn = (INT_PTR) ShellExecute(NULL,
+                                         "open",
+                                         pszPath, NULL, NULL, SW_SHOWNORMAL);
+            if (iReturn < 33) {
+                ErrorF("winAboutDlgProc - WM_COMMAND - ID_ABOUT_FAQ - "
+                       "ShellExecute failed: %d\n", (int)iReturn);
+            }
+        }
+            return TRUE;
+
+        case ID_ABOUT_AGREEMENT:
+            ShellExecute (NULL, "open", "AGREEMENT.txt", NULL, NULL, SW_SHOWNORMAL);
+            return TRUE;
         }
         break;
 
@@ -622,10 +716,84 @@
         PostMessage(s_pScreenPriv->hwndScreen, WM_NULL, 0, 0);
 
         /* Restore window procedures for URL buttons */
+        winUnoverrideURLButton(hwndDialog, ID_ABOUT_FONTS);
         winUnoverrideURLButton(hwndDialog, ID_ABOUT_WEBSITE);
+        winUnoverrideURLButton(hwndDialog, ID_ABOUT_RELEASES);
+        winUnoverrideURLButton(hwndDialog, ID_ABOUT_UG);
+        winUnoverrideURLButton(hwndDialog, ID_ABOUT_XMINGRC);
+        winUnoverrideURLButton(hwndDialog, ID_ABOUT_FAQ);
 
         return TRUE;
     }
 
     return FALSE;
 }
+
+void
+winCreateProcess (const char *exe, const char *file, const char *err, DWORD wShowWindow)
+{
+    char buffer[MAX_PATH+1];
+    STARTUPINFO start;
+    PROCESS_INFORMATION child;
+
+    if (file) {
+        HANDLE hFile;
+
+        hFile = CreateFile(file,GENERIC_READ,FILE_SHARE_READ|FILE_SHARE_WRITE,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);
+        if (hFile == INVALID_HANDLE_VALUE) {
+            LPVOID lpMsgBuf;
+
+            FormatMessage (FORMAT_MESSAGE_ALLOCATE_BUFFER |
+                           FORMAT_MESSAGE_FROM_SYSTEM |
+                           FORMAT_MESSAGE_IGNORE_INSERTS,
+                           NULL,
+                           GetLastError(),
+                           MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
+                           (LPTSTR) &lpMsgBuf,
+                           0, NULL);
+            snprintf (buffer, MAX_PATH, "Unable to read the Xming %s file.\n%s",
+                           file, (LPSTR)lpMsgBuf);
+            buffer[MAX_PATH] = '\0';
+            winMessageBoxF(buffer, MB_ICONERROR | MB_TOPMOST);
+            LocalFree(lpMsgBuf);
+            return;
+        }
+        CloseHandle(hFile);
+        snprintf(buffer, MAX_PATH, "%s %s", exe, file);
+    }
+    else
+        strncpy(buffer, exe, MAX_PATH);
+    buffer[MAX_PATH] = '\0';
+    memset(&start, 0, sizeof(start));
+    start.cb = sizeof(start);
+    start.lpTitle = (strstr(err, "Execd")) ? buffer : NULL;
+    if (wShowWindow == SW_HIDE) start.dwFlags = STARTF_USESHOWWINDOW;
+    else start.dwFlags = STARTF_USESHOWWINDOW | 0x00002000 | 0x00001000;
+    start.wShowWindow = wShowWindow;
+
+    memset(&child, 0, sizeof(child));
+
+    if (CreateProcess(NULL, buffer, NULL, NULL, FALSE, 0,
+                      NULL, NULL, &start, &child)) {
+        CloseHandle(child.hThread);
+        CloseHandle(child.hProcess);
+    }
+    else {
+        LPVOID lpMsgBuf;
+
+        FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |
+                      FORMAT_MESSAGE_FROM_SYSTEM |
+                      FORMAT_MESSAGE_IGNORE_INSERTS,
+                      NULL,
+                      GetLastError(),
+                      MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
+                      (LPTSTR) &lpMsgBuf,
+                      0, NULL);
+        snprintf(buffer, MAX_PATH, "%s Command Error!\n%s %s\n%s",
+                 err, exe, (file)?file:"", (LPSTR)lpMsgBuf);
+        buffer[MAX_PATH] = '\0';
+        winMessageBoxF(buffer, MB_ICONEXCLAMATION);
+        LocalFree(lpMsgBuf);
+    }
+    return;
+}
