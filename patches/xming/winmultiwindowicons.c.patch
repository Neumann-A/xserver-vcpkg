--- ./hw/xwin/save_winmultiwindowicons.c	2020-04-08 13:01:17.386342136 +0100
+++ ./hw/xwin/winmultiwindowicons.c	2020-04-09 22:51:36.982480645 +0100
@@ -32,10 +32,6 @@
 #include <xwin-config.h>
 #endif
 
-#ifndef WINVER
-#define WINVER 0x0500
-#endif
-
 #include <limits.h>
 #include <stdbool.h>
 
@@ -84,7 +80,7 @@
 
     xStride = pixmap->stride;
     if (stride == 0 || xStride == 0) {
-        ErrorF("winScaleXBitmapToWindows - stride or xStride is zero.  "
+        ErrorF("winScaleXImageToWindowsIcon - stride or xStride is zero.  "
                "Bailing.\n");
         return;
     }
@@ -242,18 +238,20 @@
     HDC hdc = GetDC(NULL);
     uint32_t *DIB_pixels;
     ICONINFO ii;
-    BITMAPV4HEADER bmh = { sizeof(bmh) };
+    BITMAPV5HEADER bmh;
 
     /* Define an ARGB pixel format used for Color+Alpha icons */
-    bmh.bV4Width = width;
-    bmh.bV4Height = -height;    /* Invert the image */
-    bmh.bV4Planes = 1;
-    bmh.bV4BitCount = 32;
-    bmh.bV4V4Compression = BI_BITFIELDS;
-    bmh.bV4AlphaMask = 0xFF000000;
-    bmh.bV4RedMask = 0x00FF0000;
-    bmh.bV4GreenMask = 0x0000FF00;
-    bmh.bV4BlueMask = 0x000000FF;
+    memset(&bmh, 0, sizeof(BITMAPV5HEADER));
+    bmh.bV5Size = sizeof(BITMAPV5HEADER);
+    bmh.bV5Width = width;
+    bmh.bV5Height = -height;    /* Invert the image */
+    bmh.bV5Planes = 1;
+    bmh.bV5BitCount = 32;
+    bmh.bV5Compression = BI_BITFIELDS;
+    bmh.bV5AlphaMask = 0xFF000000;
+    bmh.bV5RedMask = 0x00FF0000;
+    bmh.bV5GreenMask = 0x0000FF00;
+    bmh.bV5BlueMask = 0x000000FF;
 
     ii.fIcon = TRUE;
     ii.xHotspot = 0;            /* ignored */
@@ -332,40 +330,6 @@
     return result;
 }
 
-static HICON
-NetWMToWinIcon(int bpp, uint32_t * icon)
-{
-    static bool hasIconAlphaChannel = FALSE;
-    static bool versionChecked = FALSE;
-
-    if (!versionChecked) {
-        OSVERSIONINFOEX osvi = { 0 };
-        ULONGLONG dwlConditionMask = 0;
-
-        osvi.dwOSVersionInfoSize = sizeof(osvi);
-        osvi.dwMajorVersion = 5;
-        osvi.dwMinorVersion = 1;
-
-        /* Windows versions later than XP have icon alpha channel support, 2000 does not */
-        VER_SET_CONDITION(dwlConditionMask, VER_MAJORVERSION,
-                          VER_GREATER_EQUAL);
-        VER_SET_CONDITION(dwlConditionMask, VER_MINORVERSION,
-                          VER_GREATER_EQUAL);
-        hasIconAlphaChannel =
-            VerifyVersionInfo(&osvi, VER_MAJORVERSION | VER_MINORVERSION,
-                              dwlConditionMask);
-        versionChecked = TRUE;
-
-        ErrorF("OS has icon alpha channel support: %s\n",
-               hasIconAlphaChannel ? "yes" : "no");
-    }
-
-    if (hasIconAlphaChannel && (bpp == 32))
-        return NetWMToWinIconAlpha(icon);
-    else
-        return NetWMToWinIconThreshold(icon);
-}
-
 /*
  * Attempt to create a custom icon from the WM_HINTS bitmaps
  */
@@ -420,26 +384,26 @@
           size = xcb_get_property_value_length(reply)/sizeof(uint32_t);
           for (icon = icon_data; icon < &icon_data[size] && *icon;
                icon = &icon[icon[0] * icon[1] + 2]) {
-            winDebug("winXIconToHICON: %u x %u NetIcon\n", icon[0], icon[1]);
+            winDebug("winXIconToHICON - %u x %u NetIcon\n", icon[0], icon[1]);
 
             /* Icon data size will overflow an int and thus is bigger than the
                property can possibly be */
             if ((INT_MAX/icon[0]) < icon[1]) {
-                winDebug("winXIconToHICON: _NET_WM_ICON icon data size overflow\n");
+                winDebug("winXIconToHICON - _NET_WM_ICON icon data size overflow\n");
                 break;
             }
 
             /* Icon data size is bigger than amount of data remaining */
             if (&icon[icon[0] * icon[1] + 2] > &icon_data[size]) {
-                winDebug("winXIconToHICON: _NET_WM_ICON data is malformed\n");
+                winDebug("winXIconToHICON - _NET_WM_ICON data is malformed\n");
                 break;
             }
 
             /* Found an exact match to the size we require...  */
             if (icon[0] == iconSize && icon[1] == iconSize) {
-                winDebug("winXIconToHICON: selected %d x %d NetIcon\n",
+                winDebug("winXIconToHICON - selected %d x %d NetIcon\n",
                          iconSize, iconSize);
-                hIcon = NetWMToWinIcon(bpp, icon);
+                hIcon = (bpp == 32) ? NetWMToWinIconAlpha(icon) : NetWMToWinIconThreshold(icon);
                 break;
             }
             /* Otherwise, find the biggest icon and let Windows scale the size */
@@ -451,10 +415,10 @@
 
         if (!hIcon && biggest_icon) {
             winDebug
-                ("winXIconToHICON: selected %u x %u NetIcon for scaling to %d x %d\n",
+                ("winXIconToHICON - selected %u x %u NetIcon for scaling to %d x %d\n",
                  biggest_icon[0], biggest_icon[1], iconSize, iconSize);
 
-            hIcon = NetWMToWinIcon(bpp, biggest_icon);
+            hIcon = (bpp == 32) ? NetWMToWinIconAlpha(biggest_icon) : NetWMToWinIconThreshold(biggest_icon);
         }
 
         free(reply);
@@ -464,11 +428,11 @@
     if (!hIcon) {
         xcb_get_property_cookie_t wm_hints_cookie;
 
-        winDebug("winXIconToHICON: no suitable NetIcon\n");
+        winDebug("winXIconToHICON - no suitable NetIcon\n");
 
         wm_hints_cookie = xcb_icccm_get_wm_hints(conn, id);
         if (xcb_icccm_get_wm_hints_reply(conn, wm_hints_cookie, &hints, NULL)) {
-            winDebug("winXIconToHICON: id 0x%x icon_pixmap hint 0x%x\n",
+            winDebug("winXIconToHICON - id 0x%x icon_pixmap hint 0x%x\n",
                      (unsigned int)id,
                      (unsigned int)hints.icon_pixmap);
 
@@ -488,7 +452,7 @@
                                              0, 0, width, height,
                                              0xFFFFFF, XCB_IMAGE_FORMAT_Z_PIXMAP);
 
-                  winDebug("winXIconToHICON: id 0x%x icon Ximage 0x%p\n",
+                  winDebug("winXIconToHICON - id 0x%x icon Ximage 0x%p\n",
                            (unsigned int)id, xImageIcon);
 
                   if (hints.icon_mask)
@@ -585,34 +549,41 @@
 {
     HICON hIcon, hIconSmall = NULL, hIconOld;
 
-    if (hIconNew)
-      {
+    if (hIconNew) {
         /* Start with the icon from preferences, if any */
         hIcon = hIconNew;
         hIconSmall = hIconNew;
-      }
-    else
-      {
+    } else {
         /* If we still need an icon, try and get the icon from WM_HINTS */
         hIcon = winXIconToHICON(conn, id, GetSystemMetrics(SM_CXICON));
         hIconSmall = winXIconToHICON(conn, id, GetSystemMetrics(SM_CXSMICON));
-      }
 
-    /* If we got the small, but not the large one swap them */
-    if (!hIcon && hIconSmall) {
-        hIcon = hIconSmall;
-        hIconSmall = NULL;
+        /* If we got the small, but not the large one swap them */
+        if (!hIcon && hIconSmall) {
+            hIcon = hIconSmall;
+            hIconSmall = NULL;
+        }
+    }
+
+    /* If we still need an icon, use the default one */
+    if (!hIcon) {
+        hIcon = g_hIconX;
+        hIconSmall = g_hSmallIconX;
     }
 
-    /* Set the large icon */
-    hIconOld = (HICON) SendMessage(hWnd, WM_SETICON, ICON_BIG, (LPARAM) hIcon);
-    /* Delete the old icon if its not the default */
-    winDestroyIcon(hIconOld);
-
-    /* Same for the small icon */
-    hIconOld =
-        (HICON) SendMessage(hWnd, WM_SETICON, ICON_SMALL, (LPARAM) hIconSmall);
-    winDestroyIcon(hIconOld);
+    if (hIcon) {
+        /* Set the large icon */
+        hIconOld = (HICON) SendMessage(hWnd, WM_SETICON, ICON_BIG, (LPARAM) hIcon);
+        /* Delete the old icon if its not the default */
+        winDestroyIcon(hIconOld);
+    }
+
+    if (hIconSmall) {
+        /* Same for the small icon */
+        hIconOld =
+            (HICON) SendMessage(hWnd, WM_SETICON, ICON_SMALL, (LPARAM) hIconSmall);
+        winDestroyIcon(hIconOld);
+    }
 }
 
 void
